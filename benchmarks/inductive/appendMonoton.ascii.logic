theory
  zero	: nat.
  s	: nat -> nat.
  nil	: lst.
  cons	: (nat, lst) -> lst.
  ++	: (lst, lst) -> lst.
  pref	: P(lst, lst).
  inductive s.
  inductive zero.
  inductive cons.
  inductive nil.
  forall x: lst. pref(nil(),x).
  forall a: nat, x: lst. ~pref(cons(a,x),nil()).
  forall a: nat, b: nat, x: lst, y: lst. (pref(cons(a,x),cons(b,y)) <-> (a = b /\ pref(x,y))).
  forall r: lst. (nil() ++ r) = r.
  forall a: nat, l: lst, r: lst. (cons(a,l) ++ r) = cons(a,(l ++ r)).
conjecture
  forall x: lst, y: lst. pref(x,(x ++ y)).
