data nat := 
  | zero 
  | s nat.
data lst := 
  | nil 
  | cons nat lst.
def plusPlus : lst -> lst -> lst where
	(forall(R:lst). (plusPlus nil R) = R);
	(forall(A:nat). (forall(L:lst). (forall(R:lst). (plusPlus (cons A L) R) = (cons A (plusPlus L R))))).
def rev : lst -> lst where
	(rev nil) = nil;
	(forall(X:nat). (forall(Xs:lst). (rev (cons X Xs)) = (plusPlus (rev Xs) (cons X nil)))).
def revDot : lst -> lst where
	(forall(X:lst). (revDot X) = (revAcc X nil)).
def revAcc : lst -> lst -> lst where
	(forall(Acc:lst). (revAcc nil Acc) = Acc);
	(forall(Acc:lst). (forall(X:nat). (forall(Xs:lst). (revAcc (cons X Xs) Acc) = (revAcc Xs (cons X Acc))))).
goal   (forall(X:lst). (rev X) = (revDot X)).
