(set-logic UFDT)
(declare-datatypes ((nat 0) (lst 0)) (((zero) (s (s0 nat))) ((nil) (cons (cons0 nat) (cons1 lst)))))
(declare-fun app (lst lst) lst)
(declare-fun rev (lst) lst)
(declare-fun revPrime (lst) lst)
(declare-fun revAcc (lst lst) lst)
(assert (forall ((r lst)) (= (app nil r) r)))
(assert (forall ((a nat) (l lst) (r lst)) (= (app (cons a l) r) (cons a (app l r)))))
(assert (= (rev nil) nil))
(assert (forall ((x nat) (xs lst)) (= (rev (cons x xs)) (app (rev xs) (cons x nil)))))
(assert (forall ((x lst)) (= (revPrime x) (revAcc x nil))))
(assert (forall ((acc lst)) (= (revAcc nil acc) acc)))
(assert (forall ((acc lst) (x nat) (xs lst)) (= (revAcc (cons x xs) acc) (revAcc xs (cons x acc)))))
(assert (not (forall ((x lst)) (= (rev x) (revPrime x)))))
(check-sat)
