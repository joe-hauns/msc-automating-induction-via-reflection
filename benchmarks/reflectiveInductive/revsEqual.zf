val  nat : type.
val  lst : type.
val  env : type.
val  form : type.
val  var_nat : type.
val  var_lst : type.
val  term_nat : type.
val  term_lst : type.
val zero : nat.
val s : nat -> nat.
val nil : lst.
val cons : nat -> lst -> lst.
val plusPlus : lst -> lst -> lst.
val rev : lst -> lst.
val revDot : lst -> lst.
val revAcc : lst -> lst -> lst.
val v0_nat : var_nat.
val v0_lst : var_lst.
val next_nat : var_nat -> var_nat.
val next_lst : var_lst -> var_lst.
val inj_nat : var_nat -> term_nat.
val inj_lst : var_lst -> term_lst.
val zeroR : term_nat.
val sR : term_nat -> term_nat.
val nilR : term_lst.
val consR : term_nat -> term_lst -> term_lst.
val appR : term_lst -> term_lst -> term_lst.
val revR : term_lst -> term_lst.
val revDotR : term_lst -> term_lst.
val revAccR : term_lst -> term_lst -> term_lst.
val eq_nat : term_nat -> term_nat -> form.
val eq_lst : term_lst -> term_lst -> form.
val falseR : form.
val orR : form -> form -> form.
val notR : form -> form.
val forallR_nat : var_nat -> form -> form.
val forallR_lst : var_lst -> form -> form.
val empty : env.
val push_nat : env -> var_nat -> nat -> env.
val push_lst : env -> var_lst -> lst -> env.
val evalV_nat : env -> var_nat -> nat.
val evalV_lst : env -> var_lst -> lst.
val eval_nat : env -> term_nat -> nat.
val eval_lst : env -> term_lst -> lst.
val models : env -> form -> prop.
assert (forall(R:lst). (plusPlus nil R) = R).
assert (forall(A:nat). (forall(L:lst). (forall(R:lst). (plusPlus (cons A L) R) = (cons A (plusPlus L R))))).
assert (rev nil) = nil.
assert (forall(X:nat). (forall(Xs:lst). (rev (cons X Xs)) = (plusPlus (rev Xs) (cons X nil)))).
assert (forall(X:lst). (revDot X) = (revAcc X nil)).
assert (forall(Acc:lst). (revAcc nil Acc) = Acc).
assert (forall(Acc:lst). (forall(X:nat). (forall(Xs:lst). (revAcc (cons X Xs) Acc) = (revAcc Xs (cons X Acc))))).
assert (forall(Env:env). (forall(V:var_nat). (forall(X:nat). (evalV_nat (push_nat Env V X) V) = X))).
assert (forall(Env:env). (forall(V:var_lst). (forall(X:lst). (evalV_lst (push_lst Env V X) V) = X))).
assert (forall(Env:env). (forall(V:var_nat). (forall(W:var_nat). (forall(X:nat). (~(V = W) => (evalV_nat (push_nat Env W X) V) = (evalV_nat Env V)))))).
assert (forall(Env:env). (forall(V:var_lst). (forall(W:var_lst). (forall(X:lst). (~(V = W) => (evalV_lst (push_lst Env W X) V) = (evalV_lst Env V)))))).
assert (forall(Env:env). (forall(V:var_nat). (forall(W:var_lst). (forall(X:lst). (evalV_nat (push_lst Env W X) V) = (evalV_nat Env V))))).
assert (forall(Env:env). (forall(V:var_lst). (forall(W:var_nat). (forall(X:nat). (evalV_lst (push_nat Env W X) V) = (evalV_lst Env V))))).
assert (forall(Env:env). (forall(V:var_nat). (eval_nat Env (inj_nat V)) = (evalV_nat Env V))).
assert (forall(Env:env). (forall(V:var_lst). (eval_lst Env (inj_lst V)) = (evalV_lst Env V))).
assert (forall(Env:env). (eval_nat Env zeroR) = zero).
assert (forall(Env:env). (forall(T0:term_nat). (eval_nat Env (sR T0)) = (s (eval_nat Env T0)))).
assert (forall(Env:env). (eval_lst Env nilR) = nil).
assert (forall(Env:env). (forall(T0:term_nat). (forall(T1:term_lst). (eval_lst Env (consR T0 T1)) = (cons (eval_nat Env T0) (eval_lst Env T1))))).
assert (forall(Env:env). (forall(T0:term_lst). (forall(T1:term_lst). (eval_lst Env (appR T0 T1)) = (plusPlus (eval_lst Env T0) (eval_lst Env T1))))).
assert (forall(Env:env). (forall(T0:term_lst). (eval_lst Env (revR T0)) = (rev (eval_lst Env T0)))).
assert (forall(Env:env). (forall(T0:term_lst). (eval_lst Env (revDotR T0)) = (revDot (eval_lst Env T0)))).
assert (forall(Env:env). (forall(T0:term_lst). (forall(T1:term_lst). (eval_lst Env (revAccR T0 T1)) = (revAcc (eval_lst Env T0) (eval_lst Env T1))))).
assert (forall(Env:env). (forall(X:term_nat). (forall(Y:term_nat). ((models Env (eq_nat X Y)) <=> (eval_nat Env X) = (eval_nat Env Y))))).
assert (forall(Env:env). (forall(X:term_lst). (forall(Y:term_lst). ((models Env (eq_lst X Y)) <=> (eval_lst Env X) = (eval_lst Env Y))))).
assert (forall(Env:env). ((models Env falseR) <=> false)).
assert (forall(Env:env). (forall(Phi:form). ((models Env (notR Phi)) <=> ~((models Env Phi))))).
assert (forall(Env:env). (forall(Phi:form). (forall(Psi:form). ((models Env (orR Phi Psi)) <=> ((models Env Phi) || (models Env Psi)))))).
assert (forall(Env:env). (forall(Phi:form). (forall(V:var_nat). ((models Env (forallR_nat V Phi)) <=> (forall(X:nat). (models (push_nat Env V X) Phi)))))).
assert (forall(Env:env). (forall(Phi:form). (forall(V:var_lst). ((models Env (forallR_lst V Phi)) <=> (forall(X:lst). (models (push_lst Env V X) Phi)))))).
assert (forall(Phi:form). (((true => (models (push_nat empty v0_nat zero) Phi)) && (forall(X0:nat). ((models (push_nat empty v0_nat X0) Phi) => (models (push_nat empty v0_nat (s X0)) Phi)))) => (forall(X:nat). (models (push_nat empty v0_nat X) Phi)))).
assert (forall(Phi:form). (((true => (models (push_lst empty v0_lst nil) Phi)) && (forall(X0:nat). (forall(X1:lst). ((models (push_lst empty v0_lst X1) Phi) => (models (push_lst empty v0_lst (cons X0 X1)) Phi))))) => (forall(X:lst). (models (push_lst empty v0_lst X) Phi)))).
assert (forall(X0:nat). ~(zero = (s X0))).
assert (forall(X0:nat). (forall(X1:lst). ~(nil = (cons X0 X1)))).
assert (forall(X0:nat). (forall(X1:nat). ((s X0) = (s X1) => X0 = X1))).
assert (forall(X0:nat). (forall(X1:lst). (forall(X2:nat). (forall(X3:lst). ((cons X0 X1) = (cons X2 X3) => (X0 = X2 && X1 = X3)))))).
goal   (forall(X:lst). (rev X) = (revDot X)).
