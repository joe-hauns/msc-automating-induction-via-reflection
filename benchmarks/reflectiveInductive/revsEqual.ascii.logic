theory
  zero	: nat.
  s	: nat -> nat.
  nil	: lst.
  cons	: (nat, lst) -> lst.
  ++	: (lst, lst) -> lst.
  rev	: lst -> lst.
  rev'	: lst -> lst.
  revAcc	: (lst, lst) -> lst.
  v0_nat	: var_nat.
  v0_lst	: var_lst.
  next_nat	: var_nat -> var_nat.
  next_lst	: var_lst -> var_lst.
  inj_nat	: var_nat -> term_nat.
  inj_lst	: var_lst -> term_lst.
  zeroR	: term_nat.
  sR	: term_nat -> term_nat.
  nilR	: term_lst.
  consR	: (term_nat, term_lst) -> term_lst.
  appR	: (term_lst, term_lst) -> term_lst.
  revR	: term_lst -> term_lst.
  rev'R	: term_lst -> term_lst.
  revAccR	: (term_lst, term_lst) -> term_lst.
  eq_nat	: (term_nat, term_nat) -> form.
  eq_lst	: (term_lst, term_lst) -> form.
  falseR	: form.
  orR	: (form, form) -> form.
  notR	: form -> form.
  forallR_nat	: (var_nat, form) -> form.
  forallR_lst	: (var_lst, form) -> form.
  empty	: env.
  push_nat	: (env, var_nat, nat) -> env.
  push_lst	: (env, var_lst, lst) -> env.
  evalV_nat	: (env, var_nat) -> nat.
  evalV_lst	: (env, var_lst) -> lst.
  eval_nat	: (env, term_nat) -> nat.
  eval_lst	: (env, term_lst) -> lst.
  |=	: P(env, form).
  forall r: lst. (nil() ++ r) = r.
  forall a: nat, l: lst, r: lst. (cons(a,l) ++ r) = cons(a,(l ++ r)).
  rev(nil()) = nil().
  forall x: nat, xs: lst. rev(cons(x,xs)) = (rev(xs) ++ cons(x,nil())).
  forall x: lst. rev'(x) = revAcc(x,nil()).
  forall acc: lst. revAcc(nil(),acc) = acc.
  forall acc: lst, x: nat, xs: lst. revAcc(cons(x,xs),acc) = revAcc(xs,cons(x,acc)).
  forall env: env, v: var_nat, x: nat. evalV_nat(push_nat(env,v,x),v) = x.
  forall env: env, v: var_lst, x: lst. evalV_lst(push_lst(env,v,x),v) = x.
  forall env: env, v: var_nat, w: var_nat, x: nat. (v /= w -> evalV_nat(push_nat(env,w,x),v) = evalV_nat(env,v)).
  forall env: env, v: var_lst, w: var_lst, x: lst. (v /= w -> evalV_lst(push_lst(env,w,x),v) = evalV_lst(env,v)).
  forall env: env, v: var_nat, w: var_lst, x: lst. evalV_nat(push_lst(env,w,x),v) = evalV_nat(env,v).
  forall env: env, v: var_lst, w: var_nat, x: nat. evalV_lst(push_nat(env,w,x),v) = evalV_lst(env,v).
  forall env: env, v: var_nat. eval_nat(env,inj_nat(v)) = evalV_nat(env,v).
  forall env: env, v: var_lst. eval_lst(env,inj_lst(v)) = evalV_lst(env,v).
  forall env: env. eval_nat(env,zeroR()) = zero().
  forall env: env, t0: term_nat. eval_nat(env,sR(t0)) = s(eval_nat(env,t0)).
  forall env: env. eval_lst(env,nilR()) = nil().
  forall env: env, t0: term_nat, t1: term_lst. eval_lst(env,consR(t0,t1)) = cons(eval_nat(env,t0),eval_lst(env,t1)).
  forall env: env, t0: term_lst, t1: term_lst. eval_lst(env,appR(t0,t1)) = (eval_lst(env,t0) ++ eval_lst(env,t1)).
  forall env: env, t0: term_lst. eval_lst(env,revR(t0)) = rev(eval_lst(env,t0)).
  forall env: env, t0: term_lst. eval_lst(env,rev'R(t0)) = rev'(eval_lst(env,t0)).
  forall env: env, t0: term_lst, t1: term_lst. eval_lst(env,revAccR(t0,t1)) = revAcc(eval_lst(env,t0),eval_lst(env,t1)).
  forall env: env, x: term_nat, y: term_nat. ((env |= eq_nat(x,y)) <-> eval_nat(env,x) = eval_nat(env,y)).
  forall env: env, x: term_lst, y: term_lst. ((env |= eq_lst(x,y)) <-> eval_lst(env,x) = eval_lst(env,y)).
  forall env: env. ((env |= falseR()) <-> false).
  forall env: env, phi: form. ((env |= notR(phi)) <-> ~(env |= phi)).
  forall env: env, phi: form, psi: form. ((env |= orR(phi,psi)) <-> ((env |= phi) \/ (env |= psi))).
  forall env: env, phi: form, v: var_nat. ((env |= forallR_nat(v,phi)) <-> forall x: nat. (push_nat(env,v,x) |= phi)).
  forall env: env, phi: form, v: var_lst. ((env |= forallR_lst(v,phi)) <-> forall x: lst. (push_lst(env,v,x) |= phi)).
  forall phi: form. (((true -> (push_nat(empty(),v0_nat(),zero()) |= phi)) /\ forall x0: nat. ((push_nat(empty(),v0_nat(),x0) |= phi) -> (push_nat(empty(),v0_nat(),s(x0)) |= phi))) -> forall x: nat. (push_nat(empty(),v0_nat(),x) |= phi)).
  forall phi: form. (((true -> (push_lst(empty(),v0_lst(),nil()) |= phi)) /\ forall x0: nat, x1: lst. ((push_lst(empty(),v0_lst(),x1) |= phi) -> (push_lst(empty(),v0_lst(),cons(x0,x1)) |= phi))) -> forall x: lst. (push_lst(empty(),v0_lst(),x) |= phi)).
  forall x0: nat. zero() /= s(x0).
  forall x0: nat, x1: lst. nil() /= cons(x0,x1).
  forall x0: nat, x1: nat. (s(x0) = s(x1) -> x0 = x1).
  forall x0: nat, x1: lst, x2: nat, x3: lst. (cons(x0,x1) = cons(x2,x3) -> (x0 = x2 /\ x1 = x3)).
conjecture
  forall x: lst. rev(x) = rev'(x).
